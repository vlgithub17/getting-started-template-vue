import { Form, ProgressCallback } from '../Types';
export declare function clientSecretRequest(params: {
    url: string;
    clientSecretName: string;
    method: 'GET' | 'POST' | 'DELETE' | 'PUT';
    headers?: {
        [key: string]: string;
    };
    data?: {
        [key: string]: any;
    };
    params?: {
        [key: string]: string;
    };
}): Promise<any>;
export declare function sendInquiry(data: Form<{
    name: string;
    email: string;
    subject: string;
    message: string;
}>): Promise<"SUCCESS: Inquiry has been sent.">;
export declare function secureRequest<RequestParams = {
    url: string;
    data?: any;
    sync?: boolean;
}, Response = {
    response: any;
    statusCode: number;
    url: string;
}>(params: RequestParams | RequestParams[]): Promise<Response | Response[]>;
export declare function mock(data: Form<any & {
    raise?: 'ERR_INVALID_REQUEST' | 'ERR_INVALID_PARAMETER' | 'SOMETHING_WENT_WRONG' | 'ERR_EXISTS' | 'ERR_NOT_EXISTS';
}>, options?: {
    auth?: boolean;
    method?: string;
    responseType?: 'blob' | 'json' | 'text' | 'arrayBuffer' | 'formData' | 'document';
    contentType?: string;
    progress?: ProgressCallback;
    bypassAwaitConnection?: boolean;
}): Promise<{
    mockResponse: Record<string, any>;
}>;
