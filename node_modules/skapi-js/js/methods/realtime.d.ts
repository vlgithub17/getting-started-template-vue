import { DatabaseResponse, FetchOptions } from '../Types';
type RealtimeCallback = (rt: {
    type: 'message' | 'error' | 'success' | 'close' | 'notice' | 'private';
    message: any;
    sender?: string;
    sender_cid?: string;
}) => void;
export declare function connectRealtime(cb: RealtimeCallback, delay?: number): Promise<WebSocket>;
export declare function closeRealtime(): Promise<void>;
export declare function postRealtime(message: any, recipient: string): Promise<{
    type: 'success';
    message: 'Message sent.';
}>;
export declare function joinRealtime(params: {
    group?: string | null;
}): Promise<{
    type: 'success';
    message: string;
}>;
export declare function getRealtimeUsers(params: {
    group: string;
    user_id?: string;
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<{
    user_id: string;
    connection_id: string;
}[]>>;
export declare function getRealtimeGroups(params?: {
    searchFor: 'group' | 'number_of_users';
    value?: string | number;
    condition?: '>' | '>=' | '=' | '<' | '<=' | '!=' | 'gt' | 'gte' | 'eq' | 'lt' | 'lte' | 'ne';
    range?: string | number;
} | null, fetchOptions?: FetchOptions): Promise<DatabaseResponse<{
    group: string;
    number_of_users: number;
}>>;
export {};
