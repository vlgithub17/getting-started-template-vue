import { DatabaseResponse, FetchOptions, Form, Newsletters, SubscriptionGroup } from '../Types';
export declare function getSubscriptions(params: {
    subscriber?: string;
    subscription?: string;
    blocked?: boolean;
}, fetchOptions?: FetchOptions, _mapper?: Function): Promise<DatabaseResponse<{
    subscriber: string;
    subscription: string;
    group: number;
    timestamp: number;
    blocked: boolean;
}>>;
export declare function subscribe(option: SubscriptionGroup<number>): Promise<'SUCCESS: the user has subscribed.'>;
export declare function unsubscribe(option: SubscriptionGroup<number | '*'>): Promise<'SUCCESS: the user has unsubscribed.'>;
export declare function blockSubscriber(option: SubscriptionGroup<number | '*'>): Promise<'SUCCESS: blocked user id "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".'>;
export declare function unblockSubscriber(option: SubscriptionGroup<number | '*'>): Promise<'SUCCESS: unblocked user id "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".'>;
export declare function getNewsletterSubscription(params: {
    group?: number | 'public' | 'authorized';
}): Promise<{
    active: boolean;
    timestamp: number;
    group: number;
    subscribed_email: string;
}[]>;
export declare function subscribeNewsletter(form: Form<{
    email?: string;
    group: number | 'public' | 'authorized';
    redirect?: string;
}>): Promise<string>;
export declare function unsubscribeNewsletter(params: {
    group: number | 'public' | 'authorized' | null;
}): Promise<string>;
export declare function getNewsletters(params?: {
    searchFor: 'message_id' | 'timestamp' | 'read' | 'complaint' | 'subject';
    value: string | number;
    group: 'public' | 'authorized' | number;
    range?: string | number;
    condition?: '>' | '>=' | '=' | '<' | '<=' | 'gt' | 'gte' | 'eq' | 'lt' | 'lte';
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<Newsletters>>;
