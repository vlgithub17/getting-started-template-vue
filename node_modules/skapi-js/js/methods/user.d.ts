import { CognitoUserAttribute, CognitoUser, CognitoUserSession, CognitoUserPool } from 'amazon-cognito-identity-js';
import { Form, UserProfile, FetchOptions, DatabaseResponse, UserAttributes, PublicUser } from '../Types';
export declare let userPool: CognitoUserPool | null;
export declare function setUserPool(params: {
    UserPoolId: string;
    ClientId: string;
}): void;
export declare function consumeTicket(params: {
    ticket_id: string;
} & {
    [key: string]: any;
}): Promise<any>;
export declare function getTickets(params: {
    ticket_id?: string;
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<any[]>>;
export declare function getConsumedTickets(params: {
    ticket_id?: string;
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<any[]>>;
export declare function registerTicket(params: {
    ticket_id: string;
    description: string;
    count?: number;
    time_to_live?: number;
    placeholder?: {
        [key: string]: string;
    };
    condition?: {
        return200?: boolean;
        method?: 'GET' | 'POST';
        headers?: {
            key: string;
            value: string | string[];
            operator: 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
        }[];
        ip?: {
            value: string | string[];
            operator: 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
        };
        user_agent?: {
            value: string | string[];
            operator: 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
        };
        data?: {
            key?: string;
            value: any | any[];
            operator: 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
            setValueWhenMatch?: any | any[];
        }[];
        params?: {
            key?: string;
            value: string | string[];
            operator: 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
            setValueWhenMatch?: any | any[];
        }[];
        user?: {
            key: string;
            value: string | string[];
            operator: 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
        }[];
        record_access?: string;
        request?: {
            url: string;
            method: 'GET' | 'POST';
            headers?: {
                [key: string]: string;
            };
            data?: Record<string, any>;
            params?: Record<string, any>;
            match: {
                key: string;
                operator: 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
                value: any | any[];
            }[];
        };
    };
    action?: {
        access_group: number;
        record_access?: string;
        request?: {
            url: string;
            method: 'GET' | 'POST';
            headers?: {
                [key: string]: string;
            };
            data?: Record<string, any>;
            params?: Record<string, any>;
        };
    };
}): Promise<string>;
export declare function unregisterTicket(params: {
    ticket_id: string;
}): Promise<string>;
export declare function authentication(): {
    getSession: (option?: {
        refreshToken?: boolean;
    }) => Promise<CognitoUserSession>;
    authenticateUser: (email: string, password: string) => Promise<UserProfile>;
    createCognitoUser: (un: string) => {
        cognitoUser: CognitoUser;
        cognitoUsername: string;
    };
    getUser: () => Promise<UserProfile | null>;
    signup: (username: string, password: string, attributes: CognitoUserAttribute[]) => Promise<unknown>;
};
export declare function getProfile(options?: {
    refreshToken: boolean;
}): Promise<UserProfile | null>;
export declare function checkAdmin(): Promise<boolean>;
export declare function logout(): Promise<'SUCCESS: The user has been logged out.'>;
export declare function resendSignupConfirmation(redirect: string): Promise<'SUCCESS: Signup confirmation E-Mail has been sent.'>;
export declare function recoverAccount(redirect?: boolean | string): Promise<"SUCCESS: Recovery e-mail has been sent.">;
export declare function jwtLogin(params: {
    idToken: string;
    keyUrl: string;
    clientId: string;
    provider: string;
    nonce?: string;
}): Promise<UserProfile>;
export declare function login(form: Form<{
    username?: string;
    email: string;
    password: string;
}>): Promise<UserProfile>;
export declare function signup(form: Form<UserAttributes & {
    email: String;
    password: String;
    username?: string;
}>, option?: {
    signup_confirmation?: boolean | string;
    email_subscription?: boolean;
    login?: boolean;
}): Promise<UserProfile | "SUCCESS: The account has been created. User's signup confirmation is required." | 'SUCCESS: The account has been created.'>;
export declare function disableAccount(): Promise<'SUCCESS: account has been disabled.'>;
export declare function resetPassword(form: Form<{
    email: string;
    code: string | number;
    new_password: string;
}>): Promise<"SUCCESS: New password has been set.">;
export declare function verifyPhoneNumber(form?: Form<{
    code: string;
}>): Promise<string>;
export declare function verifyEmail(form?: Form<{
    code: string;
}>): Promise<string>;
export declare function forgotPassword(form: Form<{
    email: string;
}>): Promise<"SUCCESS: Verification code has been sent.">;
export declare function changePassword(params: {
    new_password: string;
    current_password: string;
}): Promise<'SUCCESS: Password has been changed.'>;
export declare function updateProfile(form: Form<UserAttributes>): Promise<UserProfile>;
export declare function getUsers(params?: {
    searchFor: string;
    value: string | number | boolean;
    condition?: '>' | '>=' | '=' | '<' | '<=' | '!=' | 'gt' | 'gte' | 'eq' | 'lt' | 'lte' | 'ne';
    range?: string | number | boolean;
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<PublicUser>>;
export declare function lastVerifiedEmail(params?: {
    revert: boolean;
}): Promise<string | UserProfile>;
export declare function requestUsernameChange(params: {
    redirect?: string;
    username: string;
}): Promise<'SUCCESS: confirmation e-mail has been sent.'>;
