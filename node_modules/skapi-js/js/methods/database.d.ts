import { RecordData, Form, FetchOptions, DatabaseResponse, GetRecordQuery, Condition, PostRecordConfig, ProgressCallback } from '../Types';
export declare function normalizeRecord(record: Record<string, any>): Promise<RecordData>;
export declare function deleteFiles(params: {
    endpoints: string | string[];
}): Promise<RecordData[]>;
export declare function getFile(url: string, config?: {
    dataType?: 'base64' | 'download' | 'endpoint' | 'blob' | 'text';
    expires?: number;
    progress?: ProgressCallback;
}): Promise<Blob | string | void>;
export declare function getRecords(query: GetRecordQuery & {
    private_key?: string;
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<RecordData>>;
export declare function postRecord(form: Form<Record<string, any>> | null | undefined, config: PostRecordConfig & {
    progress?: ProgressCallback;
    reference_private_key?: string;
}): Promise<RecordData>;
export declare function getTables(query: {
    table: string;
    condition?: Condition;
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<{
    number_of_records: number;
    table: string;
    size: number;
}>>;
export declare function getIndexes(query: {
    table: string;
    index?: string;
    order?: {
        by: 'average_number' | 'total_number' | 'number_count' | 'average_bool' | 'total_bool' | 'bool_count' | 'string_count' | 'index_name';
        value?: number | boolean | string;
        condition?: Condition;
    };
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<{
    table: string;
    index: string;
    number_of_records: number;
    string_count?: number;
    number_count?: number;
    boolean_count?: number;
    total_number?: number;
    total_bool?: number;
    average_number?: number;
    average_bool?: number;
}>>;
export declare function getTags(query?: {
    table: string;
    tag?: string;
    condition?: Condition;
}, fetchOptions?: FetchOptions): Promise<DatabaseResponse<{
    table: string;
    tag: string;
    number_of_records: string;
}>>;
export declare function deleteRecords(params: {
    service?: string;
    record_id?: string | string[];
    table?: {
        name: string;
        access_group?: number | 'private' | 'public' | 'authorized';
        subscription?: boolean;
    };
}): Promise<string>;
export declare function grantPrivateRecordAccess(params: {
    record_id: string;
    user_id: string | string[];
}): Promise<any>;
export declare function removePrivateRecordAccess(params: {
    record_id: string;
    user_id: string | string[];
}): Promise<any>;
export declare function listPrivateRecordAccess(params: {
    record_id: string;
    user_id: string | string[];
}): Promise<DatabaseResponse<{
    record_id: string;
    user_id: string;
}>>;
export declare function requestPrivateRecordAccessKey(record_id: string): Promise<any>;
