var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import SkapiError from './error';
import validator from '../utils/validator';
import { getRecords, postRecord, deleteRecords, getTables, getIndexes, getTags, getFile, grantPrivateRecordAccess, removePrivateRecordAccess, listPrivateRecordAccess, requestPrivateRecordAccessKey, deleteFiles } from '../methods/database';
import { connectRealtime, joinRealtime, postRealtime, closeRealtime, getRealtimeUsers, getRealtimeGroups } from '../methods/realtime';
import { secureRequest, mock, clientSecretRequest, sendInquiry } from '../methods/request';
import { request, getFormResponse, formHandler, uploadFiles } from '../utils/network';
import { subscribe, unsubscribe, blockSubscriber, unblockSubscriber, getSubscriptions, subscribeNewsletter, getNewsletters, unsubscribeNewsletter, getNewsletterSubscription } from '../methods/subscription';
import { getProfile, logout, recoverAccount, resendSignupConfirmation, authentication, login, signup, disableAccount, resetPassword, verifyEmail, verifyPhoneNumber, forgotPassword, changePassword, updateProfile, getUsers, setUserPool, userPool, lastVerifiedEmail, requestUsernameChange, consumeTicket, getConsumedTickets, getTickets, registerTicket, unregisterTicket, jwtLogin, } from '../methods/user';
import { extractFormData, fromBase62, generateRandom, toBase62, MD5 } from '../utils/utils';
export default class Skapi {
    get user() {
        if (this.__user && Object.keys(this.__user).length) {
            return JSON.parse(JSON.stringify(this.__user));
        }
        else {
            return null;
        }
    }
    set user(value) {
    }
    constructor(service, owner, options, __etc) {
        this.__version = '1.0.144';
        this.session = null;
        this.connection = null;
        this.host = 'skapi';
        this.hostDomain = 'skapi.com';
        this.target_cdn = 'd3e9syvbtso631';
        this.__disabledAccount = null;
        this.__cached_requests = {};
        this.__startKeyHistory = {};
        this.__request_signup_confirmation = null;
        this.__private_access_key = {};
        this.__class_properties_has_been_cached = false;
        this.__user = null;
        this.validate = {
            userId(val) {
                try {
                    validator.UserId(val);
                    return true;
                }
                catch (err) {
                    return false;
                }
            },
            url(val) {
                try {
                    validator.Url(val);
                    return true;
                }
                catch (err) {
                    return false;
                }
            },
            phoneNumber(val) {
                try {
                    validator.PhoneNumber(val);
                    return true;
                }
                catch (err) {
                    return false;
                }
            },
            birthdate(val) {
                try {
                    validator.Birthdate(val);
                    return true;
                }
                catch (err) {
                    return false;
                }
            },
            email(val) {
                try {
                    validator.Email(val);
                    return true;
                }
                catch (err) {
                    return false;
                }
            }
        };
        this.util = {
            MD5,
            generateRandom,
            toBase62,
            fromBase62,
            extractFormData,
            request: (url, data, options) => request.bind(this)(url, data, options, { ignoreService: true })
        };
        this.__network_logs = false;
        this.registerTicket = registerTicket.bind(this);
        this.unregisterTicket = unregisterTicket.bind(this);
        if (typeof service !== 'string' || typeof owner !== 'string') {
            throw new SkapiError('"service" and "owner" should be type <string>.', { code: 'INVALID_PARAMETER' });
        }
        if (!service || !owner) {
            throw new SkapiError('"service" and "owner" is required', { code: 'INVALID_PARAMETER' });
        }
        if (owner !== this.host) {
            validator.UserId(owner, '"owner"');
        }
        this.service = service;
        this.owner = owner;
        let autoLogin = true;
        if (options) {
            if (typeof options.autoLogin === 'boolean') {
                autoLogin = options.autoLogin;
            }
        }
        this.target_cdn = __etc?.target_cdn || this.target_cdn;
        this.hostDomain = __etc?.hostDomain || this.hostDomain;
        this.__network_logs = !!__etc?.network_logs;
        const cdn_domain = `https://${this.target_cdn}.cloudfront.net`;
        let sreg = service.substring(0, 4);
        this.admin_endpoint = fetch(`${cdn_domain}/${sreg}/admin.json`)
            .then(response => response.blob())
            .then(blob => new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(blob);
        }))
            .then(data => typeof data === 'string' ? JSON.parse(window.atob(data.split(',')[1])) : null);
        this.record_endpoint = fetch(`${cdn_domain}/${sreg}/record.json`)
            .then(response => response.blob())
            .then(blob => new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(blob);
        }))
            .then(data => typeof data === 'string' ? JSON.parse(window.atob(data.split(',')[1])) : null);
        if (!window.sessionStorage) {
            throw new Error(`This browser does not support skapi.`);
        }
        const restore = JSON.parse(window.sessionStorage.getItem(`${service}#${owner}`) || 'null');
        if (restore?.connection) {
            for (let k in restore) {
                this[k] = restore[k];
            }
        }
        this.__authConnection = (async () => {
            const admin_endpoint = await this.admin_endpoint;
            setUserPool({
                UserPoolId: admin_endpoint.userpool_id,
                ClientId: admin_endpoint.userpool_client
            });
            if (restore?.connection || autoLogin) {
                try {
                    await authentication.bind(this)().getSession({ refreshToken: !restore?.connection });
                }
                catch (err) {
                    this.__user = null;
                }
            }
            else {
                let currentUser = userPool.getCurrentUser();
                if (currentUser) {
                    currentUser.signOut();
                }
            }
        })();
        this.__connection = (async () => {
            let connection = null;
            if (!restore?.connection) {
                connection = this.updateConnection();
            }
            const storeClassProperties = () => {
                if (this.__class_properties_has_been_cached) {
                    return;
                }
                let exec = () => {
                    let data = {};
                    const to_be_cached = [
                        '__startKeyHistory',
                        '__disabledAccount',
                        '__cached_requests',
                        '__request_signup_confirmation',
                        'connection',
                    ];
                    if (this.connection) {
                        for (let k of to_be_cached) {
                            data[k] = this[k];
                        }
                        window.sessionStorage.setItem(`${service}#${owner}`, JSON.stringify(data));
                        this.__class_properties_has_been_cached = true;
                    }
                };
                return (connection instanceof Promise) ? connection.then(() => exec()) : exec();
            };
            window.addEventListener('beforeunload', () => {
                storeClassProperties();
                this.closeRealtime();
            });
            window.addEventListener("visibilitychange", () => {
                storeClassProperties();
            });
            await connection;
            await this.__authConnection;
            if (this.connection.group < 3) {
                this.version();
            }
            return this.connection;
        })();
    }
    async updateConnection() {
        try {
            this.connection = await request.bind(this)('service', {
                service: this.service,
                owner: this.owner
            }, { bypassAwaitConnection: true, method: 'get' });
        }
        catch (err) {
            if (window) {
                window.alert('Service is not available: ' + (err.message || err.toString()));
            }
            this.connection = null;
            throw err;
        }
        return this.connection;
    }
    version() {
        let skapi = `%c\r\n          $$\\                          $$\\ \r\n          $$ |                         \\__|\r\n $$$$$$$\\ $$ |  $$\\ $$$$$$\\   $$$$$$\\  $$\\ \r\n$$  _____|$$ | $$  |\\____$$\\ $$  __$$\\ $$ |\r\n\\$$$$$$\\  $$$$$$  \/ $$$$$$$ |$$ \/  $$ |$$ |\r\n \\____$$\\ $$  _$$< $$  __$$ |$$ |  $$ |$$ |\r\n$$$$$$$  |$$ | \\$$\\\\$$$$$$$ |$$$$$$$  |$$ |\r\n\\_______\/ \\__|  \\__|\\_______|$$  ____\/ \\__|\r\n                             $$ |          \r\n                             $$ |          \r\n                             \\__|          \r\n`;
        console.log(`Built with:\n${skapi}Version: ${this.__version}\n\nDocumentation: https://docs.skapi.com`, `font-family: monospace; color:blue;`);
        if (this.connection.group === 1) {
            console.log(`%cSKAPI: THE SERVICE IS IN TRIAL MODE. ALL THE USERS AND DATA WILL BE INITIALIZED EVERY 30 DAYS.`, `font-family: monospace; color:red;`);
        }
        return this.__version;
    }
    connectRealtime(cb) {
        return connectRealtime.bind(this)(cb);
    }
    jwtLogin(params) {
        return jwtLogin.bind(this)(params);
    }
    clientSecretRequest(params) {
        return clientSecretRequest.bind(this)(params);
    }
    consumeTicket(params) {
        return consumeTicket.bind(this)(params);
    }
    getConsumedTickets(params, fetchOptions) {
        return getConsumedTickets.bind(this)(params, fetchOptions);
    }
    getTickets(params, fetchOptions) {
        return getTickets.bind(this)(params, fetchOptions);
    }
    closeRealtime() {
        return closeRealtime.bind(this)();
    }
    getRealtimeUsers(params, fetchOptions) {
        return getRealtimeUsers.bind(this)(params, fetchOptions);
    }
    sendInquiry(data) {
        return sendInquiry.bind(this)(data);
    }
    getRealtimeGroups(params, fetchOptions) {
        return getRealtimeGroups.bind(this)(params, fetchOptions);
    }
    postRealtime(message, recipient) {
        return postRealtime.bind(this)(message, recipient);
    }
    joinRealtime(params) {
        return joinRealtime.bind(this)(params);
    }
    getConnection() {
        return this.__connection;
    }
    getProfile(options) {
        return getProfile.bind(this)(options);
    }
    getFile(url, config) {
        return getFile.bind(this)(url, config);
    }
    secureRequest(params) {
        return secureRequest.bind(this)(params);
    }
    getFormResponse() {
        return getFormResponse.bind(this)();
    }
    getRecords(query, fetchOptions) {
        return getRecords.bind(this)(query, fetchOptions);
    }
    getTables(query, fetchOptions) {
        return getTables.bind(this)(query, fetchOptions);
    }
    getIndexes(query, fetchOptions) { return getIndexes.bind(this)(query, fetchOptions); }
    getTags(query, fetchOptions) { return getTags.bind(this)(query, fetchOptions); }
    deleteRecords(params) { return deleteRecords.bind(this)(params); }
    resendSignupConfirmation(redirect) {
        return resendSignupConfirmation.bind(this)(redirect);
    }
    recoverAccount(redirect = false) {
        return recoverAccount.bind(this)(redirect);
    }
    getUsers(params, fetchOptions) {
        return getUsers.bind(this)(params, fetchOptions);
    }
    disableAccount() {
        return disableAccount.bind(this)();
    }
    lastVerifiedEmail(params) {
        return lastVerifiedEmail.bind(this)(params);
    }
    unsubscribeNewsletter(params) {
        return unsubscribeNewsletter.bind(this)(params);
    }
    getNewsletters(params, fetchOptions) {
        return getNewsletters.bind(this)(params, fetchOptions);
    }
    getNewsletterSubscription(params) {
        return getNewsletterSubscription.bind(this)(params);
    }
    requestUsernameChange(params) { return requestUsernameChange.bind(this)(params); }
    grantPrivateRecordAccess(params) { return grantPrivateRecordAccess.bind(this)(params); }
    removePrivateRecordAccess(params) {
        return removePrivateRecordAccess.bind(this)(params);
    }
    listPrivateRecordAccess(params) { return listPrivateRecordAccess.bind(this)(params); }
    requestPrivateRecordAccessKey(record_id) {
        return requestPrivateRecordAccessKey.bind(this)(record_id);
    }
    deleteFiles(params) {
        return deleteFiles.bind(this)(params);
    }
    uploadFiles(fileList, params) { return uploadFiles.bind(this)(fileList, params); }
    mock(data, options) { return mock.bind(this)(data, options); }
    login(form) { return login.bind(this)(form); }
    logout() { return logout.bind(this)(); }
    signup(form, option) {
        return signup.bind(this)(form, option);
    }
    resetPassword(form) { return resetPassword.bind(this)(form); }
    verifyEmail(form) {
        return verifyEmail.bind(this)(form);
    }
    verifyPhoneNumber(form) {
        return verifyPhoneNumber.bind(this)(form);
    }
    forgotPassword(form) {
        return forgotPassword.bind(this)(form);
    }
    changePassword(params) { return changePassword.bind(this)(params); }
    updateProfile(form) { return updateProfile.bind(this)(form); }
    postRecord(form, config) { return postRecord.bind(this)(form, config); }
    getSubscriptions(params, fetchOptions) {
        return getSubscriptions.bind(this)(params, fetchOptions);
    }
    subscribe(params) {
        return subscribe.bind(this)(params);
    }
    unsubscribe(params) {
        return unsubscribe.bind(this)(params);
    }
    blockSubscriber(params) {
        return blockSubscriber.bind(this)(params);
    }
    unblockSubscriber(params) {
        return unblockSubscriber.bind(this)(params);
    }
    subscribeNewsletter(params) {
        return subscribeNewsletter.bind(this)(params);
    }
}
__decorate([
    formHandler()
], Skapi.prototype, "clientSecretRequest", null);
__decorate([
    formHandler()
], Skapi.prototype, "consumeTicket", null);
__decorate([
    formHandler()
], Skapi.prototype, "getConsumedTickets", null);
__decorate([
    formHandler()
], Skapi.prototype, "getTickets", null);
__decorate([
    formHandler()
], Skapi.prototype, "getRealtimeUsers", null);
__decorate([
    formHandler()
], Skapi.prototype, "sendInquiry", null);
__decorate([
    formHandler()
], Skapi.prototype, "getRealtimeGroups", null);
__decorate([
    formHandler()
], Skapi.prototype, "postRealtime", null);
__decorate([
    formHandler()
], Skapi.prototype, "joinRealtime", null);
__decorate([
    formHandler()
], Skapi.prototype, "getProfile", null);
__decorate([
    formHandler()
], Skapi.prototype, "getFile", null);
__decorate([
    formHandler()
], Skapi.prototype, "secureRequest", null);
__decorate([
    formHandler()
], Skapi.prototype, "getFormResponse", null);
__decorate([
    formHandler()
], Skapi.prototype, "getRecords", null);
__decorate([
    formHandler()
], Skapi.prototype, "getTables", null);
__decorate([
    formHandler()
], Skapi.prototype, "getIndexes", null);
__decorate([
    formHandler()
], Skapi.prototype, "getTags", null);
__decorate([
    formHandler()
], Skapi.prototype, "deleteRecords", null);
__decorate([
    formHandler()
], Skapi.prototype, "resendSignupConfirmation", null);
__decorate([
    formHandler()
], Skapi.prototype, "recoverAccount", null);
__decorate([
    formHandler()
], Skapi.prototype, "getUsers", null);
__decorate([
    formHandler()
], Skapi.prototype, "disableAccount", null);
__decorate([
    formHandler()
], Skapi.prototype, "lastVerifiedEmail", null);
__decorate([
    formHandler()
], Skapi.prototype, "unsubscribeNewsletter", null);
__decorate([
    formHandler()
], Skapi.prototype, "getNewsletters", null);
__decorate([
    formHandler()
], Skapi.prototype, "getNewsletterSubscription", null);
__decorate([
    formHandler()
], Skapi.prototype, "requestUsernameChange", null);
__decorate([
    formHandler()
], Skapi.prototype, "grantPrivateRecordAccess", null);
__decorate([
    formHandler()
], Skapi.prototype, "removePrivateRecordAccess", null);
__decorate([
    formHandler()
], Skapi.prototype, "listPrivateRecordAccess", null);
__decorate([
    formHandler()
], Skapi.prototype, "requestPrivateRecordAccessKey", null);
__decorate([
    formHandler()
], Skapi.prototype, "deleteFiles", null);
__decorate([
    formHandler()
], Skapi.prototype, "uploadFiles", null);
__decorate([
    formHandler()
], Skapi.prototype, "mock", null);
__decorate([
    formHandler({ preventMultipleCalls: true })
], Skapi.prototype, "login", null);
__decorate([
    formHandler()
], Skapi.prototype, "logout", null);
__decorate([
    formHandler({ preventMultipleCalls: true })
], Skapi.prototype, "signup", null);
__decorate([
    formHandler({ preventMultipleCalls: true })
], Skapi.prototype, "resetPassword", null);
__decorate([
    formHandler({ preventMultipleCalls: true })
], Skapi.prototype, "verifyEmail", null);
__decorate([
    formHandler({ preventMultipleCalls: true })
], Skapi.prototype, "verifyPhoneNumber", null);
__decorate([
    formHandler({ preventMultipleCalls: true })
], Skapi.prototype, "forgotPassword", null);
__decorate([
    formHandler({ preventMultipleCalls: true })
], Skapi.prototype, "changePassword", null);
__decorate([
    formHandler({ preventMultipleCalls: true })
], Skapi.prototype, "updateProfile", null);
__decorate([
    formHandler()
], Skapi.prototype, "postRecord", null);
__decorate([
    formHandler()
], Skapi.prototype, "getSubscriptions", null);
__decorate([
    formHandler()
], Skapi.prototype, "subscribe", null);
__decorate([
    formHandler()
], Skapi.prototype, "unsubscribe", null);
__decorate([
    formHandler()
], Skapi.prototype, "blockSubscriber", null);
__decorate([
    formHandler()
], Skapi.prototype, "unblockSubscriber", null);
__decorate([
    formHandler()
], Skapi.prototype, "subscribeNewsletter", null);
//# sourceMappingURL=skapi.js.map