export type Condition = 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
export type SubscriptionGroup<T> = {
    user_id: string;
    group?: T;
};
export type GetRecordQuery = {
    record_id?: string;
    table?: {
        name: string;
        access_group?: number | 'private' | 'public' | 'authorized';
        subscription?: string;
    } | string;
    reference?: string;
    index?: {
        name: string | '$updated' | '$uploaded' | '$referenced_count' | '$user_id';
        value: string | number | boolean;
        condition?: 'gt' | 'gte' | 'lt' | 'lte' | 'eq' | 'ne' | '>' | '>=' | '<' | '<=' | '=' | '!=';
        range?: string | number | boolean;
    };
    tag?: string;
};
export type PostRecordConfig = {
    record_id?: string;
    readonly?: boolean;
    table?: {
        name?: string;
        access_group?: number | 'private' | 'public' | 'authorized';
        subscription?: boolean;
    };
    reference?: {
        record_id?: string;
        reference_limit?: number | null;
        allow_multiple_reference?: boolean;
    } | string;
    index?: {
        name: string;
        value: string | number | boolean;
    } | null;
    tags?: string[];
    remove_bin?: BinaryFile[] | string[];
};
export type BinaryFile = {
    access_group: number | 'private' | 'public' | 'authorized';
    filename: string;
    url: string;
    path: string;
    size: number;
    uploaded: number;
    getFile: (dataType?: 'base64' | 'endpoint' | 'blob', progress?: ProgressCallback) => Promise<Blob | string | void>;
};
export type RecordData = {
    service: string;
    record_id: string;
    user_id: string;
    updated: number;
    uploaded: number;
    table: {
        name: string;
        access_group: 'private' | 'public' | 'authorized' | number;
        subscription: boolean;
    };
    reference: {
        record_id?: string;
        reference_limit: number;
        allow_multiple_reference: boolean;
        referenced_count: number;
    };
    index?: {
        name: string;
        value: string | number | boolean;
    };
    data?: Record<string, any>;
    tags?: string[];
    bin?: {
        [key: string]: BinaryFile | BinaryFile[];
    };
    ip: string;
    readonly: boolean;
};
export type Connection = {
    locale: string;
    owner: string;
    email: string;
    service: string;
    region: string;
    timestamp: number;
    ip: string;
    group: number;
};
export type Form<T> = HTMLFormElement | FormData | SubmitEvent | T;
export type Newsletters = {
    message_id: string;
    timestamp: number;
    complaint: number;
    read: number;
    subject: string;
    bounced: string;
    url: string;
};
type UserProfilePublicSettings = {
    email_public?: boolean;
    phone_number_public?: boolean;
    address_public?: boolean;
    gender_public?: boolean;
    birthdate_public?: boolean;
};
export type UserAttributes = {
    name?: string;
    email?: string;
    phone_number?: string;
    address?: string | {
        formatted: string;
        locality: string;
        region: string;
        postal_code: string;
        country: string;
    };
    gender?: string;
    birthdate?: string;
    misc?: string;
    picture?: string;
    profile?: string;
    website?: string;
    nickname?: string;
};
export type UserProfile = {
    service: string;
    owner: string;
    access_group: number;
    user_id: string;
    locale: string;
    email_verified?: boolean;
    phone_number_verified?: boolean;
    signup_ticket?: string;
} & UserAttributes & UserProfilePublicSettings;
export type PublicUser = {
    service: string;
    owner: string;
    access_group: number;
    user_id: string;
    locale: string;
    subscribers?: number;
    records?: number;
    timestamp: number;
} & UserAttributes;
export type ProgressCallback = (e: {
    status: 'upload' | 'download';
    progress: number;
    loaded: number;
    total: number;
    currentFile?: File;
    completed?: File[];
    failed?: File[];
    abort: () => void;
}) => void;
export type FetchOptions = {
    limit?: number;
    fetchMore?: boolean;
    ascending?: boolean;
    startKey?: {
        [key: string]: any;
    };
    progress?: ProgressCallback;
};
export type DatabaseResponse<T> = {
    list: T[];
    startKey: string;
    endOfList: boolean;
    startKeyHistory: string[];
};
export type Service = {
    active: number;
    api_key: string;
    cors: string[];
    email: string;
    email_subscribers: number;
    group: number;
    region: string;
    name: string;
    newsletter_subscribers: number;
    service: string;
    template_activation: {
        url: string;
        subject: string;
    };
    template_verification: {
        url: string;
        sms: string;
        subject: string;
    };
    template_welcome: {
        url: string;
        subject: string;
        subscri: any;
    };
    timestamp: number;
    triggers: {
        newsletter_signed: string;
        newsletter_subscribers: string;
        template_activation: string;
        template_verification: string;
        template_welcome: string;
    };
    users: number;
};
export {};
